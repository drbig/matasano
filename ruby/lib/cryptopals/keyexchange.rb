require 'cryptopals'
require 'cryptopals/conv'
require 'cryptopals/util'

module Cryptopals
  class KeyExchangeError < Error; end

  module KeyExchange
    class DH
      # NIST recommended
      P = 104421878429480286669738809059360186573827604971139895109453204798945234426744156022580644209527048689732634282976346601900941178711173871473218838397625419858798154548171844332933184794371163599519482619608966014885638322108035513221691996211313064287911497587442934309736101582607794583972808574554592250256452475260580602332417260586128523428578127407664688160704653084070295112928411276027143363939632612749604816293220746160901350977223364991857298095916019366045232950187690907285998448542224846193676003765581524019973276610847868633371713874215240982616422197860741068905823640485887
      G = 2

      attr_reader :p, :g, :secret
      
      def initialize(opts = {})
        @p = opts[:p] || P
        @g = opts[:g] || G
        @secret = nil
      end

      def public
        @secret = rand(@p)
        @g.expmod(@secret, @p)
      end

      def private(pub)
        raise KeyExchangeError, 'no secret key assigned' unless @secret
        pub.expmod(@secret, @p)
      end
    end
  end
end
